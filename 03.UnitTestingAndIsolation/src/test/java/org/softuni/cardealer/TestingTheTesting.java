package org.softuni.cardealer;

import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.softuni.cardealer.domain.entities.Supplier;
import org.softuni.cardealer.repository.SupplierRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.jdbc.EmbeddedDatabaseConnection;
import org.springframework.boot.test.autoconfigure.jdbc.AutoConfigureTestDatabase;
import org.springframework.boot.test.autoconfigure.orm.jpa.DataJpaTest;
import org.springframework.test.context.junit4.SpringRunner;

import java.util.List;

@RunWith(SpringRunner.class)
@DataJpaTest
@AutoConfigureTestDatabase(connection = EmbeddedDatabaseConnection.H2)
public class TestingTheTesting {
    /*
    Result from testing: no matter what I do with the fake db in the @Test methods, the changes
    are not permanent and apply only for the methods. The state of the db with which the
    @Test methods work is always the same as the one it is set in the @Before method.
     */
    @Autowired
    private SupplierRepository supplierRepository;

    private String someId;

    @Before
    public void init() {
        Supplier supplier1 = new Supplier();
        supplier1.setImporter(true);
        supplier1.setName("Aleksandar");

        Supplier supplier2 = new Supplier();
        supplier2.setImporter(false);
        supplier2.setName("Pesho");

        Supplier supplier = new Supplier();
        supplier.setImporter(true);
        supplier.setName("Gosho");

        supplier = supplierRepository.saveAndFlush(supplier);
        this.someId = supplier.getId();
        supplierRepository.saveAndFlush(supplier1);
        supplierRepository.saveAndFlush(supplier2);
    }

    @Test
    public void deleteEverything() {
        this.supplierRepository.deleteAll();
        long count = supplierRepository.count();
    }

    @Test
    public void addMoreSuppliers() {
        Supplier supplier = new Supplier();
        supplier.setImporter(true);
        supplier.setName("Aleksandar123");

        this.supplierRepository.saveAndFlush(supplier);
        long count = supplierRepository.count();
    }

    @Test
    public void addMoreSuppliers2() {
        Supplier supplier = new Supplier();
        supplier.setImporter(true);
        supplier.setName("434444444");

        this.supplierRepository.saveAndFlush(supplier);
        long count = supplierRepository.count();
    }

    @Test
    public void addMoreSuppliers3() {
        Supplier supplier = new Supplier();
        supplier.setImporter(true);
        supplier.setName("456456");

        this.supplierRepository.saveAndFlush(supplier);
        long count = supplierRepository.count();
    }

    @Test
    public void getAll() {
        List<Supplier> suppliers = this.supplierRepository.findAll();
        long count = supplierRepository.count();
    }

    @Test
    public void saving_withId_expectedSameId() {
        String id = "12345";

        Supplier supplier = new Supplier();
        supplier.setImporter(true);
        supplier.setName("What");
        supplier.setId(id);
        //this.supplierRepository.saveAndFlush(supplier); //--> supplier is not updated, but is added to the db with a different id
        supplier = this.supplierRepository.saveAndFlush(supplier); //now the supplier has a new id, generated by the fake db
        List<Supplier> suppliers = this.supplierRepository.findAll();
        supplier.setName("What again");
        this.supplierRepository.saveAndFlush(supplier); //updated
        suppliers = this.supplierRepository.findAll();
    }
}
